AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Resume serverless backend

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tracing: Active
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'POST, GET'"
      AllowHeaders: "''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token''"
      AllowOrigin: "'*'"

Resources:
  BackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        - AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        health:
          Type: Api
          Properties:
            Path: /health
            Method: get
        incrementGet:
          Type: Api
          Properties:
            Path: /increment
            Method: get
        incrementPost:
          Type: Api
          Properties:
            Path: /increment
            Method: post
  SlackNotifFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: slack_notif/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        - AmazonSSMReadOnlyAccess
      Architectures:
        - x86_64
      Events:
        SlackSNS:
          Type: SNS
          Properties:
            Topic: !Ref SlackBotTopic
  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: counter_table
  EmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: kzwolenik95_CloudWatch_Alarms_Topic
      Subscription:
      - Endpoint: kzwolenik95@gmail.com
        Protocol: email
  SlackBotTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: SlackBot
      Subscription:
      - Endpoint: !GetAtt SlackNotifFunction.Arn
        Protocol: lambda
  CloudWatchHighInvocationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref SlackBotTopic
        - !Ref EmailTopic
      OKActions:
        - !Ref SlackBotTopic
      AlarmDescription: "High invocation count on lambda function"
      AlarmName: "High invocation count"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref BackendFunction
      MetricName: "Invocations"
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 50.0
      TreatMissingData: "notBreaching"
      EvaluationPeriods: 1
  CloudWatchHighBackendLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref SlackBotTopic
        - !Ref EmailTopic
      OKActions:
        - !Ref SlackBotTopic
      AlarmDescription: "High backend latency detected"
      AlarmName: "High backend latency"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref BackendFunction
      MetricName: "Duration"
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Average
      Threshold: 500.0
      TreatMissingData: "notBreaching"
      EvaluationPeriods: 1
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      AutoConfigurationEnabled: true
    DependsOn: ApplicationResourceGroup
# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   ResumeApi:
#     Description: API Gateway endpoint URL for Prod stage for lambda function
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
